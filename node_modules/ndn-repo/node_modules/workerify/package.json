{
  "name": "workerify",
  "description": "Transform web workers into browserified inline Blobs with browserify.",
  "version": "0.3.0",
  "homepage": "https://github.com/shama/workerify",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "main": "index.js",
  "keywords": [
    "worker",
    "browserify",
    "transform"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/shama/workerify.git"
  },
  "bugs": {
    "url": "https://github.com/shama/workerify/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/shama/workerify/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "browserify test/test.js -t ./ -o test/out.js",
    "start": "beefy example/index.js -- -t ./"
  },
  "files": [
    "LICENSE-MIT",
    "index.js"
  ],
  "dependencies": {
    "browserify": "~3.41.0",
    "falafel": "~0.2.1",
    "jsesc": "~0.3.0",
    "through": "~2.3.4"
  },
  "devDependencies": {
    "beefy": "~1.1.0",
    "workerstream": "~1.0.1",
    "tape": "~2.12.3"
  },
  "testling": {
    "files": "test/out.js",
    "browsers": [
      "ielatest",
      "chrome/latest",
      "firefoxlatest",
      "safari/latest",
      "opera/latest",
      "iphone/latest",
      "ipad/latest",
      "android-browser/latest"
    ]
  },
  "readme": "# workerify\n\nTransform web workers into browserified inline Blobs with browserify.\n\n[![browser support](https://ci.testling.com/shama/workerify.png)](https://ci.testling.com/shama/workerify)\n\n## example\n\nYour entry point `main.js`:\n```js\nvar mod = require('module')\nvar worker = new Worker('worker.js')\n```\n\nYour worker entry point `worker.js`:\n```js\nself.onmessage = function(e) {\n  var ab = new Uint8Array(10)\n  for (var n = 0; n < ab.length; n++) ab[n] = 1\n  self.postMessage(ab.buffer, [ab.buffer])\n}\n```\n\nBrowserify with this workerify transform:\n```shell\nbrowserify -t workerify main.js > bundle.js\n```\n\nand your `bundle.js` will look like:\n```js\nvar mod = require('module')\nvar worker = new Worker(window.URL.createObjectURL(new Blob(['BROWSERIFIED CONTENTS OF worker.js'])));\n```\n\n### further example\nTake a look at the [example module](https://github.com/shama/workerify/tree/master/example) for using with [workerstream](https://github.com/maxogden/workerstream).\n\n## Modular Workers\nThe main reason for this is modular workers.\n\nLet's say you create a module that would like to use web workers. Users would\nneed to configure the URL to the worker. When your module becomes a dependency\nof a dependency and so on, the setup becomes really cumbersome. Especially when\nyour worker needs to be browserified.\n\nWith this transform you simply `npm install workerify --save` and configure your\nmodule's `package.json` to apply the transform:\n\n``` json\n{\n  \"name\": \"mymodule\",\n  \"browserify\": {\n    \"transform\": \"workerify\"\n  }\n}\n```\n\nNow when end users `browserify` your module, anywhere in the dependency tree, it\nwill browserify and inline the worker. No URLs, no extra build steps and no\nadditional end user requirements.\n\n## Notes\nCurrently it will transform the following:\n\n```js\n// String literal\nnew Worker('./path/to/worker.js')\n\n// Variable Init Earlier\nvar myworker = './path/to/worker.js'\nnew Worker(myworker)\n\n// Or specify the workerify keyword to browserify a string anywhere\n// Useful if you want to inline your worker when working with other libs\nvar myworker = workerify './path/to/worker.js'\nvar workerstream = require('workerstream')(myworker)\n```\n\n### Using with coffeescript\n\n```shell\nbrowserify file.coffee -t coffeeify -t workerify\n```\n\n## install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install workerify\n```\n\n## release history\n* 0.3.0 - Upgrade browserify to 3.41.0. Allow worker to be used with watchify (@tmpvar)\n* 0.2.3 - support compilation from coffeescript original source file\n* 0.2.2 - string-escape dep renamed to jsesc (@mathiasbynens)\n* 0.2.1 - Add missing falafel dep and bug fixes (@mikolalysenko)\n* 0.2.0 - use falafel and support more formats\n* 0.1.0 - initial release\n\n## license\nCopyright (c) 2013 Kyle Robinson Young<br/>\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "workerify@0.3.0",
  "_from": "workerify@^0.3.0"
}
