var classes = require("ndn-contrib")
var ndn = classes.ndn;
var Database = require("../../src/database.js");
var assert = require('assert');
var NameTree = classes.NameTree;
var RepoEntry = require("../../src/repoEntry.js");
var nameTree = new NameTree()
Database.installNDN(classes.ndn);
var open = false
var path = (process.env.HOME || process.env.USERPROFILE || process.env.HOMEPATH) + "/.NDN-RepoDBTestDB";
var repo;

describe("Database.populateNameTree()", function(){
  it("should populate from memory", function(done){
    repo = new Database(new classes.ContentStore(nameTree, RepoEntry), {path: path}, function(){
      RepoEntry.installDatabase(repo);
      assert(repo.nameTree['/a/b/c/d']);
      done()
    });

  })
})
var entry, data;

describe("Database.insert()", function(){
  it("should insert Repo Entry", function(done){
    data = new classes.ndn.Data(new ndn.Name("a/b/c/d"), new ndn.SignedInfo(), "some test content")
    data.signedInfo.setFields()
    data.sign()
    var enc = data.wireEncode()

    repo.insert(enc.buffer, data, function(err){
      assert(!err)
      done()
    });
  })
  it("should be reflected in the nametree", function(){
    assert(repo.nameTree['/a/b/c/d']);

  })
})

describe("Dataase.getElement", function(){
  it("should return element in callback", function(done){
    var entry = {uri: "/a/b/c/d"}
    //console.log(repo.nameTree["/a/b/c/d"])
    repo.getElement(repo.nameTree["/a/b/c/d"].repoEntry, function(err, element){
      var d = new ndn.Data()
      d.wireDecode(element);
      assert.deepEqual(element, data.wireEncode().buffer)

      done()
    })
  })
})
