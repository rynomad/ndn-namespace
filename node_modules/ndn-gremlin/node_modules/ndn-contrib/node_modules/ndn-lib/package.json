{
  "name": "ndn-lib",
  "version": "0.5.0",
  "description": "NDN-JS:  A javascript client library for Named Data Networking --------------------------------------------------------------",
  "main": "index.js",
  "directories": {
    "example": "examples",
    "test": "tests"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/named-data/ndn-js"
  },
  "keywords": [
    "NDN"
  ],
  "browser": {
    "./js/crypto.js": "./js/browserify.js",
    "./js/transport/tcp-transport.js": "./js/browserify-tcp-transport.js"
  },
  "author": {
    "name": "UCLA"
  },
  "license": "LGPL-3.0+",
  "bugs": {
    "url": "https://github.com/named-data/ndn-js/issues"
  },
  "dependencies": {
    "jsbn": "*",
    "protobufjs": "*"
  },
  "readme": "\nNDN-JS:  A javascript client library for Named Data Networking\n--------------------------------------------------------------\n\nNDN-JS is the first native version of the NDN protocol written in JavaScript.  It\nimplements the NDN-TLV wire format and is also wire format compatible with PARC's CCNx.\n\nThe project by the UCLA NDN team - for more information on NDN, see\n\thttp://named-data.net/\n\thttp://ndn.ucla.edu/\n\nSee the file [INSTALL](https://github.com/named-data/ndn-js/blob/master/INSTALL) for build and install instructions.\n\nLicense\n-------\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\nA copy of the GNU General Public License is in the file COPYING.\n\nOverview\n--------\nThis is a young project, with minimal documentation that we are slowly enhancing.  Please\nsubmit any bugs or issues to the NDN-JS issue tracker:\nhttp://redmine.named-data.net/projects/ndn-js/issues\n\nThe primary goal of NDN-JS is to provide a pure Javascript implementation of the NDN API\nthat enables developers to create browser-based applications using Named Data Networking.\nThe approach requires no native code or signed Java applets, and thus can be delivered\nover the current web to modern browsers with no hassle for the end user.\n\nAdditional goals for the project:\n- Websockets transport (rather than TCP or UDP, which are not directly supported in\nJavascript).\n- Relatively lightweight and compact, to enable efficient use on the web.\n- Implement the NDN-TLV wire format and be wire format compatible with the PARC's CCNx implementation of NDN.\n\nThe library currently requires a remote NDN daemon, and has been tested with ndnd, from\nthe's NDNx package: http://ndnx.org/ , ndnd-tlv from the package\nhttps://github.com/named-data/ndnd-tlv and with NFD from the package\nhttps://github.com/named-data/NFD .\n\nCurrently, the library has two APIs for developers:\n\n\t1. The Javascript API for asynchronous Interest/Data exchange.\n\t   This uses WebSockets for transport and currently requires a\n\t   proxy for communication with a remote ndnd daemon.\n\n\t2. A Firefox plug-in, which implements an \"ndn:/\" url scheme\n\t   following NDNx repository conventions for file retrieval.\n\nBy default, both parts of the library connect automatically to a set of proxies and hubs\nthat are part of the NDN research project's testbed.  http://named-data.net/ndn-testbed/\nThere are currently no restrictions on non-commercial, research-oriented data exchange on\nthis testbed. (Contact jburke@remap.ucla.edu for more details.)   The developer can also\nspecify a local or remote ndnd as well, as an argument to the NDN constructor.\n\n\n\nJAVASCRIPT API\n--------------\n\nSee files in js/  and examples in tests/, examples/\n\nNDN-JS currently supports expressing Interests (and receiving data) and publishing Data\n(that answers Interests).  This includes encoding and decoding data packets as well as\nsigning and verifying them using RSA keys.\n\n** NDN connectivity **\nThe only way (for now) to get connectivity to other NDN nodes is via ndnd.  For the\nJavascript API, a Websockets proxy that can communicate the target ndnd is currently\nrequired.  Code for such a proxy (using Node.js) is in the wsproxy directory.  It\ncurrently listens on port 9696 and passes messages (using either TCP or UDP) to ndnd on\nthe same host.\n\n** Including the scripts in a web page **\nTo use NDN-JS in a web page, one of two scripts must be included using a script tag:\n\nndn.js is a combined library (and ndn-js.min.js is a compressed version of the combined library).\nSee INSTALL for instructions on how to build these files.\n\nOr they can be downloaded from the `build` directory:\n\n- https://github.com/named-data/ndn-js/raw/master/build/ndn.js\n- https://github.com/named-data/ndn-js/raw/master/build/ndn.min.js\n\n** Examples **\n\n*** ndn-ping\n\nYou can check out `examples/ndnping/ndn-ping.html` to see an example how to implement ndn-ping in NDN.js\n\n*** Example to retrieve content ***\n\nA simple example of the current API to express an Interest and receive data:\n\nvar face = new Face();\t// connect to a default hub/proxy\n\nfunction onData(interest, data) {\n  console.log(\"Received \" + data.getName().toUri());\n}\n\nface.expressInterest(new Name(\"/ndn/edu/ucla/remap/ndn-js-test/hello.txt\"), onData);\n\n** Example to publish content **\n\n// Note that publishing content requires knowledge of a\n// routable prefix for your upstream ndnd.  We are working\n// on a way to either obtain that prefix or use the /local\n// convention.\n\nFor now, see tests/browser/test-publish-async.html\n\n\n\nFIREFOX ADD-ON FOR THE NDN PROTOCOL\n-----------------------------------\n\nSee files in ndn-protocol/\n\nNDN-JS includes a Firefox extension for the ndn protocol built using the Javascript\nlibrary.   It currently obtains NDN connectivity through the NDN testbed, but you can\nclick Set on the NDN Toolbar to change the connected hub.\n\nTo install, either download\nhttps://github.com/named-data/ndn-js/raw/master/ndn-protocol.xpi\n\nor use ndn-protocol.xpi in the distribution.  In Firefox, open\nTools > Add-ons.  In the \"gear\" or \"wrench\" menu, click Install Add-on From File and open\nndn-protocol.xpi.  (In Firefox for Android, type file: in the address bar and click the\ndownloaded ndn-protocol.xpi.)  Restart Firefox.\n\nFirefox uses the protocol extension to load any URI starting with ndn.  See this test page for examples:\nndn:/ndn/edu/ucla/remap/ndn-js-test/NDNProtocolExamples.html/?ndn.ChildSelector=1\n\nWhen the page is loaded, Firefox updates the address bar with the full matched name from\nthe retrieved content object including the version, but without the implicit digest or\nsegment number (see below).\n\n* Interest selectors in the ndn protocol:\n\nYou can add interest selectors. For example, this uses 1 to select the \"rightmost\" child\n(latest version):\nndn:/ndn/edu/ucla/remap/ndn-js-test/howdy.txt?my=query&ndn.ChildSelector=1&key=value#ref\n\nThe browser loads the latest version and changes the address to:\nndn:/ndn/edu/ucla/remap/ndn-js-test/howdy.txt/%FD%052%A1%EA_%89?my=query&key=value#ref\n\nThe child selector was used and removed. Note that the other non-ndn query and\nref \"?key=value#ref\" are still present, in case they are needed by the web application.\n\nThe following selector keys are supported:\nndn.MinSuffixComponent= non-negative int\nndn.MaxSuffixComponents= non-negative int\nndn.ChildSelector= non-negative int\nndn.AnswerOriginKind= non-negative int\nndn.Scope= non-negative int\nndn.InterestLifetime= non-negative int (milliseconds)\nndn.PublisherPublicKeyDigest= % escaped value\nndn.Nonce= % escaped value\nndn.Exclude= comma-separated list of % escaped values or * for ANY\n\n* Multiple segments in the ndn protocol\n\nA URI for content with multiple segments is handled as follows. If the URI has a segment\nnumber, just retrieve that segment and return the content to the browser.\n\nOtherwise look at the name in the returned ContentObject.  If the returned name has no\nsegment number, just return the content to the browser. If the name has a segment number\nwhich isn't 0, store it and express an interest for segment 0. Also express an interest for\nthe highest segment to try to determine the FinalBlockID early. Fetch multiple segments in order and\nreturn each content to the browser (in order) as the arrive until we get the segment for FinalBlockID.\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/named-data/ndn-js",
  "_id": "ndn-lib@0.5.0",
  "dist": {
    "shasum": "0df4dc452307dc4a1331d5a62dc05895bc679feb"
  },
  "_resolved": "git+https://github.com/rynomad/ndn-js.git#f466fef0a6421d98f14cd99d9704a3ca9d757a9c",
  "_from": "ndn-lib@git+https://github.com/rynomad/ndn-js.git#ferossmerge"
}
